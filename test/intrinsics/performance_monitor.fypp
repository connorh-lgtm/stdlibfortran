#:include "common.fypp"
module performance_monitor
    use iso_fortran_env, only: real64, int64
    implicit none
    private
    
    public :: performance_timer_type, start_timer, stop_timer, get_memory_usage
    public :: check_performance_regression, write_performance_log
    
    type :: performance_timer_type
        real(real64) :: start_time = 0.0_real64
        real(real64) :: end_time = 0.0_real64
        real(real64) :: elapsed_time = 0.0_real64
        integer(int64) :: start_memory = 0_int64
        integer(int64) :: peak_memory = 0_int64
    end type
    
    real(real64), parameter :: BASELINE_TIME = 0.02_real64
    real(real64), parameter :: REGRESSION_THRESHOLD = 2.0_real64
    
contains

    subroutine start_timer(timer)
        type(performance_timer_type), intent(inout) :: timer
        call cpu_time(timer%start_time)
        timer%start_memory = get_memory_usage()
    end subroutine

    subroutine stop_timer(timer)
        type(performance_timer_type), intent(inout) :: timer
        call cpu_time(timer%end_time)
        timer%elapsed_time = timer%end_time - timer%start_time
        timer%peak_memory = max(timer%start_memory, get_memory_usage())
    end subroutine

    function get_memory_usage() result(memory_kb)
        integer(int64) :: memory_kb
        integer :: unit, ios
        character(len=256) :: line, dummy
        
        memory_kb = 0_int64
        
        open(newunit=unit, file='/proc/self/status', status='old', action='read', iostat=ios)
        if (ios == 0) then
            do
                read(unit, '(A)', iostat=ios) line
                if (ios /= 0) exit
                if (line(1:6) == 'VmPeak') then
                    read(line(8:), *, iostat=ios) memory_kb, dummy
                    exit
                end if
            end do
            close(unit)
        end if
    end function

    logical function check_performance_regression(timer, test_name)
        type(performance_timer_type), intent(in) :: timer
        character(len=*), intent(in) :: test_name
        real(real64) :: relative_time
        
        relative_time = timer%elapsed_time / BASELINE_TIME
        check_performance_regression = relative_time > REGRESSION_THRESHOLD
        
        if (check_performance_regression) then
            write(*, '(A, A, A, F6.3, A, F6.3, A)') &
                'PERFORMANCE REGRESSION in ', test_name, ': ', &
                timer%elapsed_time, 's (', relative_time, 'x baseline)'
        end if
    end function

    subroutine write_performance_log(timer, test_name, optimization_level)
        type(performance_timer_type), intent(in) :: timer
        character(len=*), intent(in) :: test_name
        character(len=*), intent(in), optional :: optimization_level
        integer :: unit
        character(len=32) :: opt_str
        
        opt_str = 'default'
        if (present(optimization_level)) opt_str = optimization_level
        
        open(newunit=unit, file='intrinsics_performance.log', position='append', action='write')
        write(unit, '(A, ",", A, ",", F8.5, ",", I0)') &
            trim(test_name), trim(opt_str), timer%elapsed_time, timer%peak_memory
        close(unit)
    end subroutine
    
end module performance_monitor
