#:include "common.fypp"
#:set I_KINDS_TYPES = list(zip(INT_KINDS, INT_TYPES, INT_KINDS))
#:set R_KINDS_TYPES = list(zip(REAL_KINDS, REAL_TYPES, REAL_SUFFIX))
#:set C_KINDS_TYPES = list(zip(CMPLX_KINDS, CMPLX_TYPES, CMPLX_SUFFIX))

module test_intrinsics
    use testdrive, only : new_unittest, unittest_type, error_type, check, skip_test
    use stdlib_kinds, only: sp, dp, xdp, qp, int8, int16, int32, int64
    use stdlib_intrinsics
    use stdlib_math, only: swap
    implicit none
    
contains

!> Collect all exported unit tests
subroutine collect_suite(testsuite)
    !> Collection of tests
    type(unittest_type), allocatable, intent(out) :: testsuite(:)

    testsuite = [ &
        new_unittest('sum', test_sum), &
        new_unittest('dot_product', test_dot_product), &
        new_unittest('reference_summation_validation', test_reference_summation_validation), &
        new_unittest('dot_product_reference_validation', test_dot_product_reference_validation), &
        new_unittest('kahan_superiority_demonstration', test_kahan_superiority_demonstration), &
        new_unittest('theoretical_error_bounds', test_theoretical_error_bounds), &
        new_unittest('complex_conjugation_accuracy', test_complex_conjugation_accuracy) &
    ]
end subroutine

subroutine test_sum(error)
    !> Error handling
    type(error_type), allocatable, intent(out) :: error

    !> Internal parameters and variables
    integer, parameter :: n = 1e3, ncalc = 3
    real(sp) :: u
    integer :: iter, i, j
    !====================================================================================
    #:for k, t, s in I_KINDS_TYPES
    #:if not k in ["int8","int16"] # skip int8 and int16
    block
        ${t}$, allocatable :: x(:)
        ${t}$, parameter :: total_sum = 0_${k}$
        ${t}$ :: xsum(ncalc), err(ncalc)
        logical, allocatable :: mask(:), nmask(:)

        allocate(x(n+1))
        do i = 1, n+1
            x(i) = i - n/2 - 1
        end do
        allocate(mask(n+1),source=.false.); mask(1:n+1:2) = .true.
        allocate(nmask(n+1)); nmask = .not.mask
        ! scramble array
        do i = 1, n+1
            call random_number(u) 
            j = 1 + floor(n*u)
            call swap( x(i), x(j) )
            call swap( mask(i), mask(j) )
            call swap( nmask(i), nmask(j) )
        end do
        
        xsum(1) = sum(x)        ! compiler intrinsic
        xsum(2) = stdlib_sum(x) ! chunked summation
        err(1:2) = abs(total_sum-xsum(1:2))
        
        call check(error, all(err(1:2)==0_${k}$) , "real sum is not accurate" )
        if (allocated(error)) return

        xsum(1) = sum(x,mask)+sum(x,nmask) ! compiler intrinsic
        xsum(2) = stdlib_sum(x,mask)+stdlib_sum(x,nmask) ! chunked summation
        err(1:2) = abs(total_sum-xsum(1:2))
        
        call check(error, all(err(1:2)==0_${k}$) , "masked real sum is not accurate" )
        if (allocated(error)) return
    end block
    #:endif
    #:endfor

    #:for k, t, s in R_KINDS_TYPES
    block
        ${t}$, allocatable :: x(:)
        ${t}$, parameter :: total_sum = 4*atan(1._${k}$), tolerance = epsilon(1._${k}$)*100
        ${t}$ :: xsum(ncalc), err(ncalc)
        logical, allocatable :: mask(:), nmask(:)

        allocate(x(n))
        do i = 1, n 
            x(i) = 8*atan(1._${k}$)*(real(i,kind=${k}$)-0.5_${k}$)/real(n,kind=${k}$)**2
        end do
        allocate(mask(n),source=.false.); mask(1:n:2) = .true.
        allocate(nmask(n)); nmask = .not.mask
        ! scramble array
        do i = 1, n
            call random_number(u) 
            j = 1 + floor(n*u)
            call swap( x(i), x(j) )
            call swap( mask(i), mask(j) )
            call swap( nmask(i), nmask(j) )
        end do
        
        xsum(1) = sum(x)        ! compiler intrinsic
        xsum(2) = stdlib_sum_kahan(x) ! chunked Kahan summation
        xsum(3) = stdlib_sum(x)       ! chunked summation
        err(1:ncalc) = abs(1._${k}$-xsum(1:ncalc)/total_sum)
        
        call check(error, all(err(:)<tolerance) , "real sum is not accurate" )
        if (allocated(error)) return

        xsum(1) = sum(x,mask)+sum(x,nmask) ! compiler intrinsic
        xsum(2) = stdlib_sum_kahan(x,mask)+stdlib_sum_kahan(x,nmask) ! chunked Kahan summation
        xsum(3) = stdlib_sum(x,mask)+stdlib_sum(x,nmask) ! chunked summation
        err(1:ncalc) = abs(1._${k}$-xsum(1:ncalc)/total_sum)
        
        call check(error, all(err(:)<tolerance) , "masked real sum is not accurate" )
        if (allocated(error)) return
    end block
    #:endfor

    #:for k, t, s in C_KINDS_TYPES
    block
        ${t}$, allocatable :: x(:)
        real(${k}$), parameter :: total_sum = 4*atan(1._${k}$), tolerance = epsilon(1._${k}$)*100
        real(${k}$) :: err(ncalc)
        ${t}$ :: xsum(ncalc)
        logical, allocatable :: mask(:), nmask(:)

        allocate(x(n))
        do i = 1, n
            x(i) = (8*atan(1._${k}$)*(real(i,kind=${k}$)-0.5_${k}$)/n**2)*cmplx(1._${k}$,1._${k}$)
        end do
        
        allocate(mask(n),source=.false.); mask(1:n:2) = .true.
        allocate(nmask(n)); nmask = .not.mask
        ! scramble array
        do i = 1, n
            call random_number(u) 
            j = 1 + floor(n*u)
            call swap( x(i), x(j) )
            call swap( mask(i), mask(j) )
            call swap( nmask(i), nmask(j) )
        end do
        
        xsum(1) = sum(x)        ! compiler intrinsic
        xsum(2) = stdlib_sum_kahan(x) ! chunked Kahan summation
        xsum(3) = stdlib_sum(x)       ! chunked summation
        err(1:ncalc) = abs(1._${k}$-(xsum(1:ncalc)%re)/total_sum)
        
        
        call check(error, all(err(:)<tolerance) , "complex sum is not accurate" )
        if (allocated(error)) return

        xsum(1) = sum(x,mask)+sum(x,nmask) ! compiler intrinsic
        xsum(2) = stdlib_sum_kahan(x,mask)+stdlib_sum_kahan(x,nmask) ! chunked Kahan summation
        xsum(3) = stdlib_sum(x,mask)+stdlib_sum(x,nmask) ! chunked summation
        err(1:ncalc) = abs(1._${k}$-(xsum(1:ncalc)%re)/total_sum)
        
        call check(error, all(err(:)<tolerance) , "complex masked sum is not accurate" )
        if (allocated(error)) return
    end block
    #:endfor

    ndarray : block
        use stdlib_strings, only: to_string
        real(sp), allocatable :: x(:,:,:)
        real(sp), parameter :: tolerance = epsilon(1._sp)*100
        integer :: i 

        allocate(x(100,100,10))
        call random_number(x)
        !> sum all elements
        call check(error, abs( sum(x) - stdlib_sum(x) )<tolerance*size(x) , "KO: full ndarray stdlib_sum" )
        if (allocated(error)) return

        call check(error, abs( sum(x) - stdlib_sum_kahan(x) )<tolerance*size(x) , "KO: full ndarray stdlib_sum_kahan" )
        if (allocated(error)) return

        !> sum over specific rank dim
        do i = 1, rank(x)
            call check(error, norm2( sum(x,dim=i) - stdlib_sum(x,dim=i) )<tolerance*size(x) ,&
                        "KO: ndarray stdlib_sum over dim "//to_string(i) )
            if (allocated(error)) return

            call check(error, norm2( sum(x,dim=i) - stdlib_sum_kahan(x,dim=i) )<tolerance*size(x) ,&
                        "KO: ndarray stdlib_sum_kahan over dim "//to_string(i) )
            if (allocated(error)) return
        end do
    end block ndarray

end subroutine

subroutine test_dot_product(error)
    !> Error handling
    type(error_type), allocatable, intent(out) :: error

    !> Internal parameters and variables
    integer, parameter :: n = 1e3, ncalc = 3
    real(sp) :: u
    integer :: iter, i, j
    !====================================================================================
    #:for k, t, s in R_KINDS_TYPES
    block
        ${t}$, allocatable :: x(:)
        ${t}$, parameter :: total_sum = 4*atan(1._${k}$), tolerance = epsilon(1._${k}$)*100
        ${t}$ :: xsum(ncalc), err(ncalc)

        allocate(x(n))
        do i = 1, n 
            x(i) = 2*sqrt( 2*atan(1._${k}$)*(real(i,kind=${k}$)-0.5_${k}$) )/n
        end do
        ! scramble array
        do i = 1, n
            call random_number(u) 
            j = 1 + floor(n*u)
            call swap( x(i), x(j) )
        end do
        
        xsum(1) = dot_product(x,x) ! compiler intrinsic
        xsum(2) = stdlib_dot_product_kahan(x,x) ! chunked Kahan summation
        xsum(3) = stdlib_dot_product(x,x)       ! chunked summation
        err(1:ncalc) = abs(1._${k}$-xsum(1:ncalc)/total_sum)
        
        call check(error, all(err(:)<tolerance) , "real dot_product is not accurate" )
        if (allocated(error)) return
    end block
    #:endfor

    #:for k, t, s in C_KINDS_TYPES
    block
        ${t}$, allocatable :: x(:)
        real(${k}$), parameter :: total_sum = 4*atan(1._${k}$), tolerance = epsilon(1._${k}$)*100
        real(${k}$) :: err(ncalc)
        ${t}$ :: xsum(ncalc)

        allocate(x(n))
        do i = 1, n
            x(i) = ( 2*sqrt( 2*atan(1._${k}$)*(real(i,kind=${k}$)-0.5_${k}$) ) / n )*cmplx(1._${k}$,1._${k}$)
        end do
        ! scramble array
        do i = 1, n
            call random_number(u) 
            j = 1 + floor(n*u)
            call swap( x(i), x(j) )
        end do
        
        xsum(1) = dot_product(x,x) ! compiler intrinsic
        xsum(2) = stdlib_dot_product_kahan(x,x) ! chunked Kahan dot_product
        xsum(3) = stdlib_dot_product(x,x)       ! chunked dot_product
        err(1:ncalc) = abs(1._${k}$-xsum(1:ncalc)%re/(2*total_sum))
         
        call check(error, all(err(:)<tolerance) , "complex dot_product is not accurate" )
        if (allocated(error)) return
    end block

    block ! test for https://github.com/fortran-lang/stdlib/issues/1016
        ${t}$ :: x(128), y(128)
        real(${k}$) :: z(128,2)
        real(${k}$), parameter :: tolerance = epsilon(1._${k}$)*100000
        real(${k}$) :: err(2)
        ${t}$ :: p(3)

        call random_number(z)
        x%re = z(:, 1); x%im = z(:, 2)
        call random_number(z)
        y%re = z(:, 1); y%im = z(:, 2)
        
        p(1) = dot_product(x,y) ! compiler intrinsic
        p(2) = stdlib_dot_product_kahan(x,y) ! chunked Kahan dot_product
        p(3) = stdlib_dot_product(x,y)       ! chunked dot_product
        err(1:2) = sqrt((p(2:3)%re - p(1)%re)**2 + (p(2:3)%im - p(1)%im)**2)
        
        call check(error, all(err(:)<tolerance) , "complex dot_product does not conform to the standard" )
        if (allocated(error)) return
    end block
    #:endfor

end subroutine

subroutine test_reference_summation_validation(error)
    !> Error handling
    type(error_type), allocatable, intent(out) :: error

    #:for k, t, s in R_KINDS_TYPES
    block
        ${t}$, allocatable :: x(:)
        ${t}$ :: result_stdlib, result_kahan
        ${t}$ :: reference_sum, relaxed_bound
        ${t}$, parameter :: base_tolerance = epsilon(1._${k}$)
        integer :: i, n

        n = 1000
        allocate(x(n))
        
        do i = 1, n
            x(i) = 1.0_${k}$ / real(i, ${k}$)**2
        end do
        
        #:if WITH_QP and k != "qp"
        block
            real(qp) :: ref_qp
            ref_qp = 0.0_qp
            do i = 1, n
                ref_qp = ref_qp + real(x(i), qp)
            end do
            reference_sum = real(ref_qp, ${k}$)
        end block
        #:elif WITH_XDP and k != "xdp" and k != "qp"
        block
            real(xdp) :: ref_xdp
            ref_xdp = 0.0_xdp
            do i = 1, n
                ref_xdp = ref_xdp + real(x(i), xdp)
            end do
            reference_sum = real(ref_xdp, ${k}$)
        end block
        #:else
        reference_sum = sum(x)
        #:endif
        
        result_stdlib = stdlib_sum(x)
        result_kahan = stdlib_sum_kahan(x)
        
        relaxed_bound = 1000.0_${k}$ * base_tolerance * sum(abs(x))
        
        call check(error, abs(result_kahan - reference_sum) < relaxed_bound, &
                  "Kahan summation should be within relaxed error bounds for harmonic series")
        if (allocated(error)) return
        
        call check(error, abs(result_stdlib - reference_sum) < relaxed_bound, &
                  "Stdlib summation should be within relaxed error bounds for harmonic series")
        if (allocated(error)) return
    end block
    #:endfor

end subroutine

subroutine test_dot_product_reference_validation(error)
    !> Error handling
    type(error_type), allocatable, intent(out) :: error

    #:for k, t, s in R_KINDS_TYPES
    block
        ${t}$, allocatable :: x(:), y(:)
        ${t}$ :: result_stdlib, result_kahan
        ${t}$ :: reference_dot, practical_bound
        ${t}$, parameter :: base_tolerance = epsilon(1._${k}$)
        integer :: i, n

        n = 1000
        allocate(x(n), y(n))
        
        do i = 1, n
            x(i) = 1.0_${k}$ / sqrt(real(i, ${k}$))
            y(i) = 1.0_${k}$ / sqrt(real(i, ${k}$))
        end do
        
        #:if WITH_QP and k != "qp"
        block
            real(qp) :: ref_qp
            ref_qp = 0.0_qp
            do i = 1, n
                ref_qp = ref_qp + real(x(i), qp) * real(y(i), qp)
            end do
            reference_dot = real(ref_qp, ${k}$)
        end block
        #:elif WITH_XDP and k != "xdp" and k != "qp"
        block
            real(xdp) :: ref_xdp
            ref_xdp = 0.0_xdp
            do i = 1, n
                ref_xdp = ref_xdp + real(x(i), xdp) * real(y(i), xdp)
            end do
            reference_dot = real(ref_xdp, ${k}$)
        end block
        #:else
        reference_dot = dot_product(x, y)
        #:endif
        
        result_stdlib = stdlib_dot_product(x, y)
        result_kahan = stdlib_dot_product_kahan(x, y)
        
        practical_bound = 1000.0_${k}$ * base_tolerance * reference_dot
        
        call check(error, abs(result_kahan - reference_dot) < practical_bound, &
                  "Kahan dot product should be within practical error bounds")
        if (allocated(error)) return
        
        call check(error, abs(result_stdlib - reference_dot) < practical_bound, &
                  "Stdlib dot product should be within practical error bounds")
        if (allocated(error)) return
    end block
    #:endfor

end subroutine

subroutine test_kahan_superiority_demonstration(error)
    !> Error handling
    type(error_type), allocatable, intent(out) :: error

    #:for k, t, s in R_KINDS_TYPES
    block
        ${t}$, allocatable :: x(:)
        ${t}$ :: result_stdlib, result_kahan
        ${t}$ :: expected, error_stdlib, error_kahan
        ${t}$, parameter :: base_tolerance = epsilon(1._${k}$)
        integer :: i, n

        n = 10000
        allocate(x(n))
        
        do i = 1, n
            x(i) = ((-1.0_${k}$)**(i-1)) / real(i, ${k}$)**3
        end do
        expected = sum(x)
        
        result_stdlib = stdlib_sum(x)
        result_kahan = stdlib_sum_kahan(x)
        
        error_stdlib = abs(expected - result_stdlib)
        error_kahan = abs(expected - result_kahan)
        
        call check(error, error_kahan <= error_stdlib, &
                  "Kahan summation should be at least as accurate as stdlib for alternating series")
        if (allocated(error)) return
        
        call check(error, error_kahan < 1000.0_${k}$ * base_tolerance * sum(abs(x)), &
                  "Kahan summation should handle alternating series within reasonable bounds")
        if (allocated(error)) return
    end block
    #:endfor

end subroutine

subroutine test_theoretical_error_bounds(error)
    !> Error handling
    type(error_type), allocatable, intent(out) :: error

    #:for k, t, s in R_KINDS_TYPES
    block
        ${t}$, allocatable :: x(:)
        ${t}$ :: result_kahan, exact_sum
        ${t}$ :: practical_bound, actual_error
        ${t}$, parameter :: base_tolerance = epsilon(1._${k}$)
        integer :: i, n

        n = 100
        allocate(x(n))
        
        do i = 1, n
            x(i) = 1.0_${k}$ / real(i, ${k}$)
        end do
        
        exact_sum = sum(x)
        result_kahan = stdlib_sum_kahan(x)
        actual_error = abs(result_kahan - exact_sum)
        
        practical_bound = 100.0_${k}$ * base_tolerance * sum(abs(x))
        
        call check(error, actual_error <= practical_bound, &
                  "Kahan summation error should be within practical error bound")
        if (allocated(error)) return
        
        call check(error, result_kahan /= 0.0_${k}$, &
                  "Kahan summation should produce non-zero result for harmonic series")
        if (allocated(error)) return
    end block
    #:endfor

end subroutine

subroutine test_complex_conjugation_accuracy(error)
    !> Error handling
    type(error_type), allocatable, intent(out) :: error

    #:for k, t, s in C_KINDS_TYPES
    block
        ${t}$, allocatable :: x(:), y(:)
        ${t}$ :: result_kahan, result_intrinsic
        ${t}$ :: expected_result
        real(${k}$), parameter :: base_tolerance = epsilon(1._${k}$)
        real(${k}$) :: error_magnitude, practical_bound
        integer :: i, n

        n = 10
        allocate(x(n), y(n))
        
        do i = 1, n
            x(i) = cmplx(real(i, ${k}$), real(i, ${k}$))
            y(i) = x(i)
        end do
        
        result_kahan = stdlib_dot_product_kahan(x, y)
        result_intrinsic = dot_product(x, y)
        expected_result = sum(conjg(x) * y)
        
        error_magnitude = abs(result_kahan - expected_result)
        practical_bound = 1000.0_${k}$ * base_tolerance * abs(expected_result)
        
        call check(error, error_magnitude < practical_bound, &
                  "Complex dot product should match expected result")
        if (allocated(error)) return
        
        call check(error, abs(result_kahan - result_intrinsic) < practical_bound, &
                  "Kahan and intrinsic complex dot products should agree")
        if (allocated(error)) return
        
        call check(error, abs(expected_result) > 0.0_${k}$, &
                  "Complex dot product test should have non-zero expected result")
        if (allocated(error)) return
    end block
    #:endfor

end subroutine
    
end module test_intrinsics

program tester
    use, intrinsic :: iso_fortran_env, only : error_unit
    use testdrive, only : run_testsuite, new_testsuite, testsuite_type
    use test_intrinsics, only : collect_suite
    implicit none
    integer :: stat, is
    type(testsuite_type), allocatable :: testsuites(:)
    character(len=*), parameter :: fmt = '("#", *(1x, a))'

    stat = 0

    testsuites = [ &
        new_testsuite("sparse", collect_suite) &
        ]

    do is = 1, size(testsuites)
        write(error_unit, fmt) "Testing:", testsuites(is)%name
        call run_testsuite(testsuites(is)%collect, error_unit, stat)
    end do

    if (stat > 0) then
        write(error_unit, '(i0, 1x, a)') stat, "test(s) failed!"
        error stop
    end if
end program
